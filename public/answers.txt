0-0:
async function createNotice(payload) {
  const advance_req = await fetch(rollup_server + "/notice", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ payload }),
  });
  const json = await advance_req.json();
  return json; 
}

0-1:

function toUpperFromPayload(payload) {
  let strPayload = hex2str(payload)
  let jsonPayload = strToJson(strPayload)
  jsonPayload.message = jsonPayload.message.toUpperCase()
  let returnStr = jsonToStr(jsonPayload)
  let returnHex = str2hex(returnStr)
  return returnHex
}

0-2:
function listMissions() {
  return str2hex(jsonToStr({ missions }))
}


0-3:
function acceptMission(args, missions) {
  console.log(missions)
  const missionIndex = missions.findIndex(m => {
    return m == args.mission
  });
  if (missionIndex !== -1) {
    missions.splice(missionIndex, 1); 
    return str2hex(jsonToStr({ 
        missionSelected: args.mission
    }));
  }
}

0-4:
async function createReport(decoded_payload) {
  let payload = str2hex(decoded_payload)// remember to encode the payload!
  const req = await fetch(rollup_server + "/report", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ payload }),
  });
  return req
}

1-2:
function attackDragon(dragonHP) {
  dragonHP -= 20
  if (dragonHP == 0) {
    return str2hex(`Your dragon is dead`);
  }
  return str2hex(jsonToStr({ health: dragonHP }))
}

2-0:
function lootDragon(sender, inventories, dragonAssets) {
  if (!inventories[sender]) {
    inventories[sender] = []
  }
  let inventory = inventories[sender]

  let l = dragonAssets.length
  for (let i=0; i < l; i++) {
    let asset = dragonAssets.pop()
    console.log(asset)
    inventory.push(asset)
  }

  console.log("Inventory after looting: ", inventory);
  return {
    player: sender,
    inventory: inventory
  }
}

2-1:
function sellAssets(sender, inventory, wallet) {
  if (!wallet[sender]) {
    wallet[sender] = { gold: 0 }
  }

  inventory[sender].forEach(item => {
    wallet[sender].gold += 50
  })

  // Clear the inventory after selling
  inventory[sender] = []
  
  console.log(`${sender} earned ${wallet[sender].gold} gold from selling assets.`)
  return {
    player: sender,
    wallet: wallet[sender]
  };
}

2-2: 
function deposit(payload, wallet) {
  console.log("pw", payload, wallet)
  let { sender, value } = parseDeposit(payload)
  console.log("sv", sender, value)
  if (!wallet[sender]) {
    wallet[sender] = { ether: BigInt(0) }
  }

  if (!wallet[sender].ether) {
    wallet[sender].ether = BigInt(0)
  }

  wallet[sender].ether += value

  return {
    player: sender,
    ether: wallet[sender].ether.toString()
  };

};